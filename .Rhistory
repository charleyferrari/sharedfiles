cnt <- all_inc %>% group_by(State) %>% summarize(cnt = n()) %>%
arrange(desc(cnt))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(xaxis = list(categoryorder = as.character(cnt$State)))
p1
cnt$State
as.character(cnt$State)
plot_ly() %>%
add_trace(x = c('one', 'two', 'three'), y = c(2,1,2)) %>%
layout(xaxis = list(categoryorder = c('one', 'two', 'three')))
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(xaxis = list(categoryorder = as.character(cnt$State)))
p1
View(cnt)
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = as.character(cnt$State)))
p1
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)))
p1
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(cnt)
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)))
p1
all_inc <- inc %>% filter(complete.cases(inc))
removeOutliers <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, removeOutliers, bot=0, top =2500)
all_inc$clip_employ <- sapply(all_inc$Employees, removeOutliers, bot=0, top =2500)
View(all_inc)
library(dplyr)
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h')
ny <- all_inc %>% filter(State == 'NY')
removeOutliers <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, removeOutliers, bot=0, top =2500)
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h')
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 120))
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 150))
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 250))
p2
plotly_POST(p2)
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 250), yaxis = list(title = ''),
xaxis = list(title = 'Number of Employees'))
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 180), yaxis = list(title = ''),
xaxis = list(title = 'Number of Employees'))
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 200), yaxis = list(title = ''),
xaxis = list(title = 'Number of Employees'))
p2
plotly_POST(p2)
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', x = ~Industry, y = ~clip_employ)
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'bar', x = ~Industry, y = ~clip_employ) %>%
layout(margin = list(b = 120))
p2
p3 <- ggplot(ny, aes(x=Industry, y=clip_employ))
p3 + geom_point() + coord_flip()
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', x = ~Industry, y = ~clip_employ) %>%
layout(margin = list(b = 120))
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(b = 120))
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 200))
p2
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 200), yaxis = list(title = ''))
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 200), yaxis = list(title = ''),
xaxis = list(title = 'Number of Employees'))
p2
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv", header= TRUE)
all_inc <- inc %>% filter(complete.cases(inc))
# First Graph
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(cnt)
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)))
p1
ny <- all_inc %>% filter(State == 'NY')
removeOutliers <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, removeOutliers, bot=0, top =2500)
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 200), yaxis = list(title = ''),
xaxis = list(title = 'Number of Employees'))
p2
load("~/Downloads/Plotly/hpi examples/R/hpraw2.RData")
setwd('~/Downloads/sharedfiles')
View(hp)
hp <- hp %>% filter(Metro == 'Boston', Seasonality == 'SA') %>% select(DATE, Tier, HPI)
write.csv(hp, 'housingprices.csv')
write.csv(hp, 'housingprices.csv', row.names = FALSE)
hp <- read.csv('housingprices.csv')
library(reshape2)
View(all_inc)
plot_ly(hp) %>%
add_trace(x = ~DATE, y = ~HPI, color = ~Tier)
plot_ly(hp) %>%
add_trace(x = ~DATE, y = ~HPI, color = ~Tier, type = 'line')
plot_ly(hp) %>%
add_trace(x = ~DATE, y = ~HPI, color = ~Tier, type = 'scatter', mode = 'lines')
plot_ly(hp) %>%
add_trace(x = ~DATE, y = ~HPI, color = ~Tier, type = 'scatter', mode = 'lines') %>%
layout(yaxis = list(title = 'Housing Price Index'), margin = list(b = 120))
?dcast
heatmapData <- cast(State ~ Industry, value.var = 'Revenus', fun.aggregate = 'sum')
heatmapData <- dcast(State ~ Industry, value.var = 'Revenus', fun.aggregate = 'sum')
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenus', fun.aggregate = 'sum')
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', fun.aggregate = 'sum')
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', .fun = 'sum')
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', .fun = sum)
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', fun.aggregate = sum)
View(heatmapData)
p3 <- plot_ly(hp) %>%
add_lines(x = ~DATE, y = ~HPI, color = ~Tier) %>%
layout(yaxis = list(title = 'Housing Price Index'), margin = list(b = 120))
p3
api_create(p3)
hp$DATE <- as.POSICct(hp$DATE)
hp$DATE <- as.POSIXct(hp$DATE)
p3 <- plot_ly(hp) %>%
add_lines(x = ~DATE, y = ~HPI, color = ~Tier) %>%
layout(yaxis = list(title = 'Housing Price Index'), margin = list(b = 120))
p3
p3 <- plot_ly(hp) %>%
add_lines(x = ~DATE, y = ~HPI, color = ~Tier) %>%
layout(yaxis = list(title = 'Housing Price Index'))
p3
View(heatmapData)
row.names(heatmapData)
View(heatmapData)
View(heatmapData)
?dcast
rownames(heatmapData)
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', fun.aggregate = sum)
rownames(heatmapData) <- heatmapData$State
heatmapData <- heatmapData %>% select(-State)
View(heatmapData)
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = headmapData, y = rownames(heatmapData),
x = colnames(heatmapData))
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', fun.aggregate = sum)
rownames(heatmapData) <- heatmapData$State
heatmapData <- heatmapData %>% select(-State)
row.names(heatmapData)
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = heatmapData, y = rownames(heatmapData),
x = colnames(heatmapData))
p4
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = heatmapData)
p4
View(heatmapData)
as.matrix(heatmapData)
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = matrix(heatmapData))
p4
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = as.matrix(heatmapData), y = rownames(heatmapData),
x = colnames(heatmapData))
p4
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = as.matrix(heatmapData), y = rownames(heatmapData),
x = colnames(heatmapData)) %>%
layout(margin = list(b = 200))
p4
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = as.matrix(heatmapData), y = rownames(heatmapData),
x = colnames(heatmapData), hoverdata = 'z') %>%
layout(margin = list(b = 200))
p4
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = as.matrix(heatmapData), y = rownames(heatmapData),
x = colnames(heatmapData), hoverinfo = 'z') %>%
layout(margin = list(b = 200))
p4
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = as.matrix(heatmapData), y = rownames(heatmapData),
x = colnames(heatmapData)) %>%
layout(margin = list(b = 200))
p4
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv", header= TRUE)
all_inc <- inc %>% filter(complete.cases(inc))
### First Graph
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(cnt)
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)))
p1
api_create(p1, filename = 'webinar/bar')
ny <- all_inc %>% filter(State == 'NY')
removeOutliers <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, removeOutliers, bot=0, top =2500)
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 200), yaxis = list(title = ''),
xaxis = list(title = 'Number of Employees'))
p2
api_create(p2, filename = 'webinar/box')
url <- 'https://raw.githubusercontent.com/charleyferrari/sharedfiles/master/housingprices.csv'
hp <- read.csv(url)
hp$DATE <- as.POSIXct(hp$DATE)
p3 <- plot_ly(hp) %>%
add_lines(x = ~DATE, y = ~HPI, color = ~Tier) %>%
layout(yaxis = list(title = 'Housing Price Index'))
p3
api_create(p3, filename = 'webinar/line')
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', fun.aggregate = sum)
rownames(heatmapData) <- heatmapData$State
heatmapData <- heatmapData %>% select(-State)
row.names(heatmapData)
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = as.matrix(heatmapData), y = rownames(heatmapData),
x = colnames(heatmapData)) %>%
layout(margin = list(b = 200))
p4
api_create(p4, filename = 'webinar/heatmap')
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)),
xaxis = list(title = 'Company Count'))
p1
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv", header= TRUE)
all_inc <- inc %>% filter(complete.cases(inc))
View(inc)
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(cnt)
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)),
xaxis = list(title = 'Company Count'))
p1
api_create(p1, filename = 'webinar/bar')
ny <- all_inc %>% filter(State == 'NY')
removeOutliers <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, removeOutliers, bot=0, top =2500)
p2 <- plot_ly(ny) %>%
add_trace(type = 'box', y = ~Industry, x = ~clip_employ, orientation = 'h') %>%
layout(margin = list(l = 200), yaxis = list(title = ''),
xaxis = list(title = 'Number of Employees'))
p2
api_create(p2, filename = 'webinar/box')
url <- 'https://raw.githubusercontent.com/charleyferrari/sharedfiles/master/housingprices.csv'
hp <- read.csv(url)
hp$DATE <- as.POSIXct(hp$DATE)
View(hp)
p3 <- plot_ly(hp) %>%
add_lines(x = ~DATE, y = ~HPI, color = ~Tier) %>%
layout(yaxis = list(title = 'Housing Price Index'))
p3
api_create(p3, filename = 'webinar/line')
heatmapData <- dcast(all_inc,State ~ Industry,
value.var = 'Revenue', fun.aggregate = sum)
rownames(heatmapData) <- heatmapData$State
heatmapData <- heatmapData %>% select(-State)
row.names(heatmapData)
p4 <- plot_ly(heatmapData) %>%
add_heatmap(z = as.matrix(heatmapData), y = rownames(heatmapData),
x = colnames(heatmapData)) %>%
layout(margin = list(b = 200))
p4
api_create(p4, filename = 'webinar/heatmap')
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h', marker = list(color = 'orange')) %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)),
xaxis = list(title = 'Company Count'))
p1
api_create(p1, filename = 'webinar/bar')
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h')
$>$
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)),
xaxis = list(title = 'Company Count'))
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h')
#marker = list(color = 'orange')) %>%
$>$
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)),
xaxis = list(title = 'Company Count'))
p1
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h')
#marker = list(color = 'orange')) %>%
%>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)),
xaxis = list(title = 'Company Count'))
p1
p1 <- plot_ly(cnt) %>%
add_trace(y = ~State, x = ~cnt, type = 'bar', orientation = 'h') %>%
layout(yaxis = list(categoryorder = 'array', categoryarray = as.character(cnt$State)),
xaxis = list(title = 'Company Count'))
p1
library(ggplot2)
library(plyr)
library(dplyr)
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv", header= TRUE)
head(inc)
summary(inc)
summary(inc[,c(3:6,8)])
all_inc <- inc[complete.cases(inc)==TRUE,]
all_inc <- inc %>% filter(complete.cases(inc))
cnt <- all_inc %>% group_by(State) %>% summarize(cnt = n()) %>%
arrange(desc(cnt))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
cnt <- all_inc %>% group_by(State) %>% summarize(cnt = n()) %>%
dplyr::arrange(desc(cnt))
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(desc(cnt))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
p <- ggplot(cnt, aes(x=reorder(State,cnt), y=cnt)) + geom_bar(stat='identity')
p + coord_flip()
library(ggthemes)
p <- ggplot(cnt, aes(x=reorder(State,cnt), y=cnt)) + geom_bar(stat='identity')
p + coord_flip() + theme_tufte()
ny <- all_inc %>% filter(State == 'NY')
p <- ggplot(ny, aes(x = Industry, y = Employees)) + geom_point()
p + coord_flip()
winsor <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, winsor, bot=0, top =2500)
p3 <- ggplot(ny, aes(x=Industry, y=clip_employ))
p3 + geom_point() + coord_flip()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) + theme_tufte()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) +
annotate('text', label= c('outliers','3,000','10,000','32,000'),
x = c(18,16,5,2), y=c(2300,2400,2400,2400), size=c(4,3,3,3))  +
theme_tufte()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) +
annotate('text', label= c('outliers','3,000','10,000','32,000'),
x = c(18,16,5,2), y=c(2300,2400,2400,2400), size=c(4,3,3,3))
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) +
annotate('text', label= c('outliers','3,000','10,000','32,000'),
x = c(18,16,5,2), y=c(2300,2400,2400,2400), size=c(4,3,3,3))  +
theme_tufte()
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv", header= TRUE)
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(desc(cnt))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
all_inc <- inc[complete.cases(inc)==TRUE,]
all_inc <- inc %>% filter(complete.cases(inc))
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(desc(cnt))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
p <- ggplot(cnt, aes(x=reorder(State,cnt), y=cnt)) + geom_bar(stat='identity')
p + coord_flip() + theme_tufte()
ny <- all_inc %>% filter(State == 'NY')
p <- ggplot(ny, aes(x = Industry, y = Employees)) + geom_point()
p + coord_flip()
winsor <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, winsor, bot=0, top =2500)
p3 <- ggplot(ny, aes(x=Industry, y=clip_employ))
p3 + geom_point() + coord_flip()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) + theme_tufte()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) +
annotate('text', label= c('outliers','3,000','10,000','32,000'),
x = c(18,16,5,2), y=c(2300,2400,2400,2400), size=c(4,3,3,3))  +
theme_tufte()
ny_ave <- ny %>% group_by(Industry) %>%
dplyr::summarise(mean = mean(Employees),
sd = sd(Employees),
median = median(clip_employ),
lower = quantile(clip_employ)[2],
upper = quantile(clip_employ)[4])
p4 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_point()
p4 <- p4 + geom_pointrange(ymin=ny_ave$lower, ymax=ny_ave$upper)
p4 + ylim(c(0,750)) + coord_flip()
p4 + ylim(c(0,750)) + coord_flip() + theme_tufte()
p5 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_bar(stat='identity')
p5 <- p5 + geom_errorbar(ymin=ny_ave$lower, ymax=ny_ave$upper, width=.1, color='red')
p5 + ylim(c(0,750)) + coord_flip() + theme_tufte()
library(ggplot2)
library(plyr)
library(dplyr)
library(ggthemes)
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv", header= TRUE)
all_inc <- inc[complete.cases(inc)==TRUE,]
all_inc <- inc %>% filter(complete.cases(inc))
# aggregate by state
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(desc(cnt))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
# flip coords, and reorder.
p <- ggplot(cnt, aes(x=reorder(State,cnt), y=cnt)) + geom_bar(stat='identity')
p + coord_flip() + theme_tufte()
ny <- all_inc %>% filter(State == 'NY')
p <- ggplot(ny, aes(x = Industry, y = Employees)) + geom_point()
p + coord_flip()
# compute lower and upper whiskers
winsor <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, winsor, bot=0, top =2500)
p3 <- ggplot(ny, aes(x=Industry, y=clip_employ))
p3 + geom_point() + coord_flip()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) + theme_tufte()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) +
annotate('text', label= c('outliers','3,000','10,000','32,000'),
x = c(18,16,5,2), y=c(2300,2400,2400,2400), size=c(4,3,3,3))  +
theme_tufte()
ny_ave <- ny %>% group_by(Industry) %>%
dplyr::summarise(mean = mean(Employees),
sd = sd(Employees),
median = median(clip_employ),
lower = quantile(clip_employ)[2],
upper = quantile(clip_employ)[4])
p4 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_point()
p4 <- p4 + geom_pointrange(ymin=ny_ave$lower, ymax=ny_ave$upper)
p4 + ylim(c(0,750)) + coord_flip() + theme_tufte()
p5 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_bar(stat='identity')
p5 <- p5 + geom_errorbar(ymin=ny_ave$lower, ymax=ny_ave$upper, width=.1, color='red')
p5 + ylim(c(0,750)) + coord_flip() + theme_tufte()
all_inc$rev_per_employ <- all_inc$Revenue / all_inc$Employees
all_inc <- all_inc %>% mutate(rev_per_employ = Revenue / Employees)
p6 <- ggplot(all_inc, aes(x=Industry, y=rev_per_employ))
p6 + geom_boxplot() + coord_flip() + theme_tufte()
p10 <- ggplot(all_inc, aes(x=Industry, y=rev_per_employ))
p10 + geom_boxplot() + coord_flip()
p11 <- ggplot(all_inc,aes(x=rev_per_employ))
p11 <- p11 + geom_density() + facet_wrap(~ Industry)
p11 + scale_x_log10(breaks=c(10000, 100000, 1000000, 10000000))
p11 + scale_x_log10(breaks=c(10000, 100000, 1000000, 10000000)) + theme_tufte()
library(ggplot2)
library(plyr)
library(dplyr)
library(ggthemes)
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA608/master/lecture1/Data/inc5000_data.csv", header= TRUE)
View(inc)
summary(inc)
all_inc <- inc %>% filter(complete.cases(inc))
cnt <- all_inc %>% group_by(State) %>% dplyr::summarize(cnt = n()) %>%
arrange(desc(cnt))
p <- ggplot(cnt, aes(x=State, y=cnt)) + geom_bar(stat='identity')
p
p <- ggplot(cnt, aes(x=reorder(State,cnt), y=cnt)) + geom_bar(stat='identity')
p + coord_flip() + theme_tufte()
ny <- all_inc %>% filter(State == 'NY')
p <- ggplot(ny, aes(x = Industry, y = Employees)) + geom_point()
p + coord_flip()
winsor <- function(x, bot, top)  { return(min(top, max(x, bot))) }
ny$clip_employ <- sapply(ny$Employees, winsor, bot=0, top =2500)
p3 <- ggplot(ny, aes(x=Industry, y=clip_employ))
p3 + geom_point() + coord_flip()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) + theme_tufte()
p3 + geom_boxplot() + coord_flip(ylim=c(0,2500)) +
annotate('text', label= c('outliers','3,000','10,000','32,000'),
x = c(18,16,5,2), y=c(2300,2400,2400,2400), size=c(4,3,3,3))  +
theme_tufte()
ny_ave <- ny %>% group_by(Industry) %>%
dplyr::summarise(mean = mean(Employees),
sd = sd(Employees),
median = median(clip_employ),
lower = quantile(clip_employ)[2],
upper = quantile(clip_employ)[4])
p4 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_point()
p4 <- p4 + geom_pointrange(ymin=ny_ave$lower, ymax=ny_ave$upper)
p4 <- p4 + geom_pointrange(ymin=ny_ave$lower, ymax=ny_ave$upper)
p4 + ylim(c(0,750)) + coord_flip() + theme_tufte()
p5 <- ggplot(ny_ave, aes(x=Industry, y=median)) + geom_bar(stat='identity')
p5 <- p5 + geom_errorbar(ymin=ny_ave$lower, ymax=ny_ave$upper, width=.1, color='red')
p5 + ylim(c(0,750)) + coord_flip() + theme_tufte()
all_inc <- all_inc %>% mutate(rev_per_employ = Revenue / Employees)
p6 <- ggplot(all_inc, aes(x=Industry, y=rev_per_employ))
p6 + geom_boxplot() + coord_flip() + theme_tufte()
p11 <- ggplot(all_inc,aes(x=rev_per_employ))
p11 <- p11 + geom_density() + facet_wrap(~ Industry)
p11 + scale_x_log10(breaks=c(10000, 100000, 1000000, 10000000)) + theme_tufte()
